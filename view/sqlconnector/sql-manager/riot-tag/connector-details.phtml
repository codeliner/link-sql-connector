<h2 if="{ isNew }" class="text-center"><?php echo $this->translate('New Sql Table Connector') ?></h2>
<h2 if="{ !isNew }" class="text-center">{ connector.name }</h2>
<hr>
<div class="row">
    <div class="col-xs-12 col-md-8 col-md-offset-2">
        <div class="{ form-group: true, has-success: dbal_connection.value }">
            <label for="dbal_connection" class="control-label"><?php echo $this->translate('Database') ?></label>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-xs-11 col-md-7 col-md-offset-2">

        <div class="{ form-group: true, has-success: dbal_connection.value }">
            <select name="dbal_connection" class="form-control" onchange="{ onConnectionChange }">
                <option value="">- <?php echo $this->translate('Select a database') ?> -</option>
                <option each="{ dbalConnections }">{ dbname }</option>
            </select>
        </div>
    </div>
    <div class="col-xs-1">
        <button class="{ btn: true, btn-default: true, active: showConnectionConfig }" onclick="{ onAddOrEditConnection }">
            <span class="{ glyphicon: true, glyphicon-plus: !dbal_connection.value, glyphicon-edit: dbal_connection.value }"></span>
        </button>
    </div>
</div>
<div if="{ showConnectionConfig }" class="row">
    <div class="col-xs-12 col-md-8 col-md-offset-2">
        <connection-config ></connection-config>
    </div>
</div>
<div class="row">
    <div class="col-xs-12 col-md-8 col-md-offset-2">
        <div class="{ form-group: true, has-success: table.value }">
            <label for="table" class="control-label"><?php echo $this->translate('DB Table') ?></label>
            <select name="table" class="form-control" onchange="{ onTableChange }">
                <option class="empty-option" value="">- <?php echo $this->translate('Select a Table') ?> -</option>
                <option each="{ tables }">{ name }</option>
            </select>
        </div>
        <div class="{ form-group: true, has-success: isValidConnectorName() }">
            <label for="name" class="control-label"><?php echo $this->translate('Connector Name') ?></label>
            <input name="name" class="form-control" onchange="{ updateNameGeneration }" >
        </div>
        <div class="form-group">
            <button id="regenerate_type_btn" if="{ !isNew }" class="btn btn-default" onclick="{ toggleTypeRegeneration }"><?php echo $this->translate('Regenerate Type Class') ?>&nbsp;<span class="glyphicon glyphicon-refresh"></span></button>
            <div class="pull-right">
                <a href="#connectors" class="btn btn-default"><?php echo $this->translate('Cancel')?></a>&nbsp;&nbsp;
                <button class="{ btn: true, btn-success: true, disabled: !isValid() }" onclick="{ saveConnector }"><?php echo $this->translate('Save')?></button>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
    function (context) {

        var self = this,
            connectionApiUrl = "<?php echo $this->url('prooph.link/sql_connector/api/connection') ?>",
            connectorApiUrl  = "<?php echo $this->url('prooph.link/sql_connector/api/connector')  ?>",
            set_values = function (values) {
                Prooph.Link.Helpers.merge_tag_elements_with_obj(self, values);
            },
            dbname_table_to_name = function(dbname, table) {
                return s.titleize(s.humanize(dbname)) + " " + s.titleize(s.humanize(table));
            };

        this.context = context;
        this.tables = [];
        this.isLoadingTables = false;
        this.isAutoGeneratedName = false;
        this.showConnectionConfig = false;
        this.regenerateType = false;

        if (context.isNew) {
            this.isNew = true;

            this.connector = {
                dbname : "",
                name : "",
                table : ""
            };

            this.isAutoGeneratedName = true;
        } else {
            this.isNew = false;

            this.connector = _.find(context.app.connectors, {id : context.app.routeMatch.index});

            var autoName = dbname_table_to_name(this.connector.dbal_connection, this.connector.table);

            this.isAutoGeneratedName = autoName == this.connector.name;
        }



        this.dbalConnections = context.app.dbalConnections;

        this.isValidConnectorName = function () {
            if (! this.name.value) return false;

            var con = _.find(context.app.connectors, {name : this.name.value});

            if (! con) return true;

            return con.name === this.connector.name;
        };

        this.isValid = function () {
            if (! this.dbal_connection.value) return false;
            if (! this.table.value) return false;
            if (! this.name.value) return false;

            return true;
        };

        this.generateConnectorNameIfPossible = function () {
            if (! this.dbal_connection.value) return;
            if (! this.table.value) return;
            if (! this.isAutoGeneratedName) return;

            this.name.value = dbname_table_to_name(this.dbal_connection.value, this.table.value);
            this.isAutoGeneratedName = true;
        };

        this.updateNameGeneration = function () {
            if (! this.name.value) {
                this.isAutoGeneratedName = true;
                this.generateConnectorNameIfPossible();
            } else {
                this.isAutoGeneratedName = false
            }
        };

        this.loadTables = function () {
            if (! this.dbal_connection.value) return;

            var url = connectionApiUrl + "/" + this.dbal_connection.value + "/tables";

            this.isLoadingTables = true;
            this.update();

            $.getJSON(url).then(function (data) {
                self.tables = data;
                self.isLoadingTables = false;
                self.update();

                if (_.where(data, {name : self.connector.table})) {
                    self.table.value = self.connector.table;
                    self.update();
                }
            }, $.failNotify);
        };

        this.toggleTypeRegeneration = function () {
            this.regenerateType = ! this.regenerateType;
            $(this.regenerate_type_btn).toggleClass('active').find('span').toggleClass('glyphicon-refresh glyphicon-ok');
        }

        this.saveConnector = function () {
            var tmpData = {
                'dbal_connection' : this.dbal_connection.value,
                'table' : this.table.value,
                'name' : this.name.value
            };

            if (this.isNew) {
                $.postJSON(connectorApiUrl, tmpData).then(
                    function (data) {
                        context.app.connectors.push(data);
                        riot.route('#connectors');
                    },
                    $.failNotify
                )
            } else {
                tmpData['regenerate_type'] = this.regenerateType;

                $.putJSON(connectorApiUrl + "/" + self.connector.id, tmpData).then(
                    function (data) {
                        _.merge(self.connector, data);
                        riot.route('#connectors');
                    },
                    $.failNotify
                )
            }
        }

        this.onTableChange = function () {
            this.generateConnectorNameIfPossible();
        }

        this.onConnectionChange = function (e) {
            this.trigger("DbalConnectionDidChange", this.dbal_connection.value);
            this.loadTables();
            this.generateConnectorNameIfPossible();
        };

        this.onAddOrEditConnection = function (e) {
            self.showConnectionConfig = ! self.showConnectionConfig;
        };

        this.on('mount', function() {
            set_values(self.connector);
            self.update();
            this.loadTables();
        });

        //Repaint empty table option
        this.on("update", function () {
            var $option = $(this.table).children(".empty-option");
            if (this.isLoadingTables) {
                $option.html("<?php echo $this->translate('Loading Tables') ?> ...");
            } else {
                $option.html("- <?php echo $this->translate('Select a Table') ?> -");
            }
        });
    }
</script>